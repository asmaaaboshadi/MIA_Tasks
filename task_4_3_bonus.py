# -*- coding: utf-8 -*-
"""Task_4.3_Bonus.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dq4ZL_1offzYWi__MabJjY5s1ARFMnNb
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage
from google.colab import drive

import pandas as pd

# Load the dataset from Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Path to the dataset
file_path = '/content/drive/My Drive/Asmaa_Task_4/Mall_Customers.csv'

# Read the dataset into a DataFrame
data = pd.read_csv(file_path)

# Select relevant columns for segmentation
features = data[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Apply KMeans with the chosen number of clusters (e.g., 5 from the elbow method)
kmeans = KMeans(n_clusters=5, random_state=42)
clusters = kmeans.fit_predict(scaled_features)

# Add cluster labels to the original data
data['Cluster'] = clusters

import seaborn as sns
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Cluster', palette='viridis')
plt.title('Customer Segmentation')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend(title='Cluster')
plt.show()

import scipy.cluster.hierarchy as sch


# Cutting the dendrogram to create clusters
from sklearn.cluster import AgglomerativeClustering

hc = AgglomerativeClustering(n_clusters=5, affinity='euclidean', linkage='ward')
hc_clusters = hc.fit_predict(scaled_features)

# Adding cluster labels to the original data
data['HC_Cluster'] = hc_clusters

# Plotting the clusters
plt.figure(figsize=(10, 6))
plt.scatter(data['Annual Income (k$)'], data['Spending Score (1-100)'], c=data['HC_Cluster'], cmap='viridis', marker='o')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation using Hierarchical Clustering')
plt.colorbar(label='Cluster')
plt.show()

from sklearn.cluster import DBSCAN

# DBSCAN Clustering
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_clusters = dbscan.fit_predict(scaled_features)

# Adding cluster labels to the original data
data['DBSCAN_Cluster'] = dbscan_clusters

# Plotting the clusters
plt.figure(figsize=(10, 6))
plt.scatter(data['Annual Income (k$)'], data['Spending Score (1-100)'], c=data['DBSCAN_Cluster'], cmap='viridis', marker='o')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.title('Customer Segmentation using DBSCAN')
plt.colorbar(label='Cluster')
plt.show()

"""###**1. What type of machine learning problem is this?**

This is an unsupervised machine learning problem. Specifically, it is a clustering problem where the goal is to segment customers into distinct groups based on their characteristics without prior labeled outcomes.


---


###**2. What machine learning algorithms are suitable for customer segmentation tasks?**

Algorithms suitable for customer segmentation tasks include:
- K-Means Clustering
- Hierarchical Clustering
- DBSCAN (Density-Based Spatial Clustering of Applications with Noise)
- Gaussian Mixture Models (GMM)


---


###**3. Plot the Answer (hint : use scatter plot)**
The results are in the previous cells
"""